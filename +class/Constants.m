classdef (Abstract) Constants

    properties (Constant)
        stationName     = 'EMSat'

        windowSize      = [1244, 660]
        windowMinSize   = [ 640, 580]

        gps2locAPI      = 'https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=<Latitude>&longitude=<Longitude>&localityLanguage=pt'
        gps2loc_City    = 'city'
        gps2loc_Unit    = 'principalSubdivisionCode'

        yMinLimRange    = 80                                                % Minimum y-Axis limit range
        yMaxLimRange    = 100                                               % Maximum y-Axis limit range

        switchTimes     = 3                                                 % Maximum attempts to switch the antenna
        switchPause     = 0.050                                             % Pause in seconds to ask antenna's name after its switch attempt (must be greater than 40ms)
        antACUPause     = 1                                                 % Pause in seconds to wait for ACU messages (ACU could be locked by Compass!)

        Timeout         = 10                                                % Maximum time in seconds to extract valid info from receiver
        udpTimeout      = 3                                                 % Maximum time in seconds to receive a specific number of datagrams 
        idnTimeout      = 1                                                 % Maximum time in seconds to extract IDN info from receiver
        gpsTimeout      = 1                                                 % Maximum time in seconds to receive bytes from GPS
        fileVersion     = 'RFlookBin v.2/1'

        checkIP         = 'http://checkip.dyndns.org'

        udpDefaultPort  = 24001                                             % See "EB500Lib.json"
        gpsDefaultPort  = {'COM1', 24002}                                   % See "GPSLib.json"

        tcpServerStatus = 0
        tcpServerIP     = '172.24.5.159'                                    % OpenVPN address
        tcpServerPort   = 8910

        errorTimeTrigger     = 60                                           % Minimum time in seconds to change the status of the task ("In progress" to "Error") in case of a persistent error
        errorCountTrigger    = 10                                           % ~mod(errorCount, errorCountTrigger) defines instants in which app will try to reconnect to the receiver
        errorGPSCountTrigger = 100                                          % ~mod(errorCount, errorCountTrigger) defines instants in which app will try to reconnect to the GPS
    end

    methods (Static = true)
        %-----------------------------------------------------------------%
        function [upYLim, strUnit] = yAxisUpLimit(Unit)
            switch lower(Unit)
                case 'dbm';                    upYLim = -20; strUnit = 'dBm';
                case {'dbµv', 'dbμv', 'dbuv'}; upYLim =  87; strUnit = 'dBµV';
                case {'dbµv/m', 'dbμv/m'};     upYLim = 100; strUnit = 'dBµV/m';
            end
        end


        %-----------------------------------------------------------------%
        function d = english2portuguese()
            names  = ["Azimuth", ...
                      "BitsPerSample", ...
                      "DataPoints", ...
                      "Description", ...
                      "Elevation", ...
                      "gpsType", ...
                      "Height", ...
                      "Installation", ...
                      "IntegrationFactor", ...
                      "LevelUnit", ...
                      "Name", ...
                      "Observation", ...
                      "ObservationSamples", ...
                      "ObservationType", ...
                      "Polarization", ...
                      "Receiver", ...
                      "Resolution", ...
                      "RevisitTime", ...
                      "RFMode", ...
                      "Sync", ...
                      "StepWidth", ...
                      "Target", ...
                      "taskType", ...
                      "Type", ...
                      "TraceMode"];
            values = ["Azimute", ...
                      "Codificação", ...
                      "Pontos por varredura", ...
                      "Descrição", ...
                      "Elevação", ...
                      "GPS", ...
                      "Altura", ...
                      "Instalação", ...
                      "Integração", ...
                      "Unidade", ...
                      "Nome", ...
                      "Observação", ...
                      "Amostras a coletar", ...
                      "Tipo de observação", ...
                      "Polarização", ...
                      "Receptor", ...
                      "Resolução", ...
                      "Tempo de revisita", ...
                      "Modo RF", ...
                      "Sincronismo", ...
                      "Passo da varredura", ...
                      "Alvo", ...
                      "Tipo de tarefa", ...
                      "Tipo", ...
                      "Traço"];
        
            d = dictionary(names, values);
        end


        %-----------------------------------------------------------------%
        function htmlCode = metadataInfo(taskMetaData)
            d = class.Constants.english2portuguese();

            htmlCode = '<font style="font-family: Helvetica; font-size: 10px;">';
            for ii = 1:numel(taskMetaData)
                htmlCode = sprintf('%s<b>%s</b>', htmlCode, taskMetaData(ii).group);
                
                structFields = fields(taskMetaData(ii).value);    
                for jj = 1:numel(structFields)
                    Field = structFields{jj};
                    Value = taskMetaData(ii).value.(Field);
                    if isnumeric(Value)
                        Value = string(Value);
                    end
            
                    if isKey(d, Field)
                        Field = d(Field);
                    end
                    
                    htmlCode = sprintf('%s\n• <span style="color: #808080;">%s:</span> %s', htmlCode, Field, Value);
                end
                htmlCode = sprintf('%s\n\n', htmlCode);
            end
            htmlCode = replace(sprintf('%s</font>', strtrim(htmlCode)), newline, '<br>');
        end
    end
end